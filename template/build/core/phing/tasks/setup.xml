<project name="setup" default="setup">

  <target name="setup" description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:build:all, setup:drupal:install">
    <echo>For a full list of available Phing targets, run:</echo>
    <echo>./task.sh -l</echo>
    <echo></echo>
  </target>

  <target name="setup:behat" description="Generates tests/behat/local.yml file for executing Behat tests locally.">
    <copy file="${repo.root}/tests/behat/example.local.yml" tofile="${repo.root}/tests/behat/local.yml">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>

  <!-- This is run when a project is cloned to a new environment. -->
  <target name="setup:build:all" description="Generates all required files for a full build. E.g., (re)builds docroot, etc."
          depends="setup:git-hooks, setup:drupal:settings, setup:behat, setup:composer:install, setup:build:profile, frontend:build">
  </target>

  <target name="setup:build:profile" description="Build a subsidiary makefile shipped with profile">
    <if>
      <equals arg1="${project.profile.contrib}" arg2="true"/>
      <then>
        <echo message="Building make file for ${project.profile.name}"/>
        <property name="profile.dir" value="${docroot}/profiles/contrib/${project.profile.name}"/>
        <exec dir="${repo.root}" command="drush make ${profile.dir}/drupal-org.make ${profile.dir} --no-core -y" logoutput="true" passthru="true"/>
      </then>
    </if>
  </target>

  <target name="setup:composer:install" description="Installs project dependencies, including drupal core and contrib.">
    <exec dir="${repo.root}" command="composer install --prefer-source" logoutput="true" passthru="true"/>
  </target>

  <!-- Check for docroot. -->
  <target name="setup:check:docroot" description="Checks to see if docroot exists. Fails if it does not.">
    <if>
      <not>
        <available property="sites.exists" file="${docroot}/sites/default" type="dir"/>
      </not>
      <then>
        <fail message="The docroot is missing. Please run setup:build:all." />
      </then>
    </if>
  </target>

  <target name="setup:drupal:settings" description="Create local settings files using default settings files.">
    <chmod mode="0755" file="${docroot}/sites/default"/>
    <copy file="${docroot}/sites/default/settings/default.local.settings.php" tofile="${docroot}/sites/default/settings/local.settings.php"/>
    <copy file="${docroot}/sites/default/default.local.drushrc.php" tofile="${docroot}/sites/default/local.drushrc.php"/>
    <!-- Re-extract value of $options['uri'] in case it was not yet set. -->
    <phpVariable file="${repo.root}/drush/drushrc.php" variable="options[uri]" outputProperty="local_url" />
  </target>

  <target name="setup:drupal:install"
          description="Installs Drupal using credentials from local.settings.php."
          depends="setup:drupal:settings, setup:check:docroot">

    <if>
      <available property="config.exists" file="${repo.root}/config/default/system.site.yml"/>
      <then>
        <drush command="site-install" assume="yes" verbose="TRUE">
          <option name="site-name">"${project.human_name}"</option>
          <option name="site-mail">"${drupal.account.mail}"</option>
          <option name="account-name">"${drupal.account.name}"</option>
          <option name="account-pass">"${drupal.account.password}"</option>
          <option name="account-mail">"${drupal.account.mail}"</option>
          <option name="config-dir">"${repo.root}/config/default"</option>
          <param>"${project.profile.name}"</param>
          <param>"install_configure_form.update_status_module='array(FALSE,FALSE)'"</param>
        </drush>
      </then>
      <else>
        <drush command="site-install" assume="yes" verbose="TRUE">
          <option name="site-name">"${project.human_name}"</option>
          <option name="site-mail">"${drupal.account.mail}"</option>
          <option name="account-name">"${drupal.account.name}"</option>
          <option name="account-pass">"${drupal.account.password}"</option>
          <option name="account-mail">"${drupal.account.mail}"</option>
          <param>"${project.profile.name}"</param>
          <param>"install_configure_form.update_status_module='array(FALSE,FALSE)'"</param>
        </drush>
      </else>
      </if>
  </target>

  <target name="setup:db:sync" description="Overwrites local database with upstream database from Acquia Cloud.">
    <property name="db.source" value="@test" />
    <drush command="sql-drop" assume="yes"></drush>
    <drush command="sql-sync" assume="yes">
      <param>"${db.source}"</param>
      <param>"@self"</param>
      <!-- This key is defined in /drush/drushrc.php. -->
      <option name="structure-tables-key">"lightweight"</option>
    </drush>
  </target>

  <target name="setup:git-hooks" description="Installs git hooks to local .git/hooks directory from version controlled scripts/git-hooks directory.">
    <!-- Symlink into .git directory. -->
    <delete dir="${repo.root}/.git/hooks" quiet="true" failonerror="false"/>
    <exec dir="${repo.root}/.git" command="ln -snv ../scripts/git-hooks hooks" logoutput="true"/>

    <!-- Grant execution permissions. -->
    <chmod mode="0755">
      <fileset dir="${repo.root}/scripts/git-hooks">
        <exclude name="**/*.sample" />
        <exclude name="**/README.md" />
      </fileset>
    </chmod>
  </target>

  <target name="setup:bolt:update" description="Pulls in upstream changes to project template from Bolt repository.">
    <echo>You may be prompted to trust GitHub's SSL certification and to enter your GitHub password.</echo>
    <echo>If you have two factor authentication enabled for GitHub, you must use an access token in lieu of a password.</echo>
    <echo>GitHub access tokens can be generated here: https://github.com/settings/tokens</echo>

    <input message="Press any key to continue" propertyName="continue" />

    <exec dir="${repo.root}" command="./scripts/bolt/update-scaffold" logoutput="true" passthru="true"/>
  </target>

</project>
