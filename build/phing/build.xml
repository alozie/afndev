<project name="bolt" default="build">

  <!-- Define bolt root directory. -->
  <property name="bolt.root.relative" value="${project.basedir}/../.."/>
  <resolvepath propertyName="bolt.root" file="${bolt.root.relative}"/>

  <!-- Include yml setting. -->
  <property file="${project.basedir}/build.yml" override="true"/>
  <resolvepath propertyName="bolt.new.dir" file="${bolt.new.dir}"/>

  <!-- Load the root project.yml file for this project. -->
  <property file="${bolt.root}/project.yml" override="true"/>

  <!-- Runs all project template related targets. -->
  <target name="bolt:new-project" description="Runs all targets required to spin up new project from Bolt." depends="bolt:configure, bolt:create"></target>

  <!-- Creates new configuration files from example.*.yml files.
       Note: this target must be called by itself first. Other targets must be
       executed separately so that they may load the correct configuration   -->
  <target name="bolt:configure" description="Generates default .yml configuration files based on provided example files.">
    <copy todir="${bolt.root}">
      <fileset dir="${bolt.root}/install">
        <include name="example.project.yml" />
        <include name="example.make.yml" />
      </fileset>
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>

    <!-- Rename files by removing "example" prefix. -->
    <move file="${bolt.root}/example.make.yml" tofile="${bolt.root}/make.yml" />
    <move file="${bolt.root}/example.project.yml" tofile="${bolt.root}/project.yml" />
    <copy file="${bolt.root}/template/example.local.yml" tofile="${bolt.root}/local.yml" />
  </target>

  <target name="bolt:clean" description="Removes generated configuration files from Bolt directory.">
    <delete file="${bolt.root}/project.yml"/>
    <delete file="${bolt.root}/make.yml"/>
    <delete file="${bolt.root}/local.yml"/>
  </target>

  <!-- Create a new project directory based on current repository. -->
  <target name="bolt:create" description="Create a new project based on local repository.">
    <if>
      <available file="${bolt.new.dir}" type="dir" />
      <then>
        <input message="The following directory will be permanently deleted. Continue?${line.separator}${bolt.new.dir} " validargs="y,n" propertyname="do.delete" />
        <condition property="do.abort">
          <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Build aborted by user.</fail>
        <!-- Remove from existing directory. -->
        <delete dir="${bolt.new.dir}" />
      </then>
    </if>

    <!-- (re)Create project directory using contents of /template. -->
    <mkdir dir="${bolt.new.dir}" />
    <copy todir="${bolt.new.dir}" >
      <fileset dir="${bolt.root}/template" casesensitive="false" defaultexcludes="false" excludes=".cvsignore SCCS SCCS/** vssver.scc .svn .svn/** ._* .DS_Store .darcs .darcs/** .git .git/** .gitattributes .gitmodules .idea .idea/** .editorconfig">
        <!-- Exclude files that should not be copied. -->
        <exclude name="vendor/**" />
      </fileset>
    </copy>

    <!-- Copy configuration files to new project. -->
    <copy file="${bolt.root}/make.yml" tofile="${bolt.new.dir}/make.yml" />
    <copy file="${bolt.root}/project.yml" tofile="${bolt.new.dir}/project.yml" />
    <copy file="${bolt.root}/local.yml" tofile="${bolt.new.dir}/local.yml" />

    <!-- Reflexively expand properties in specified dirs/files. -->
    <reflexive>
      <fileset dir="${bolt.new.dir}">
        <include name="README.md" />
        <include name="readme/**/*" />
        <include name="sites/default/settings.php" />
        <include name="sites/default/settings/**/*" />
        <include name="tests/phpunit/SettingsTest.php" />
      </fileset>
      <filterchain>
        <expandproperties />
      </filterchain>
    </reflexive>

    <gitinit repository="${bolt.new.dir}" />
    <exec command="git checkout -b ${project.git.default_branch}"  dir="${bolt.new.dir}" logoutput="true" passthru="true" />
    <exec command="git add -A" dir="${bolt.new.dir}" logoutput="true" passthru="true" />
    <gitcommit repository="${bolt.new.dir}" message="Initial commit of default files from Bolt." allFiles="true" />

    <exec dir="${bolt.new.dir}" command="composer install" logoutput="true" passthru="true" />

    <echo></echo>
    <echo>New project was created in ${bolt.new.dir}</echo>
    <echo>Please change to the new project directory and run remaining setup tasks.</echo>
  </target>

  <!-- This target is meant to test Bolt itself on TravisCI.
       A few things to note:
       - We do not run validate:* targets, since they can be run in parallel.
  -->
  <target name="bolt:self-test" description="Runs tests against acquia-pso/bolt proper.">
      <phingcall target="bolt:configure" />
      <phingcall target="bolt:create" />
      <phingcall target="setup:build:all" />
      <phingcall target="setup:drupal:install" />
      <phingcall target="setup:git-hooks" />
      <phingcall target="setup:behat" />
      <phingcall target="tests:security-updates" />
      <phingcall target="tests:behat" />
      <phingcall target="tests:phpunit" />
  </target>
</project>
