<!--
  name: build.xml
  description: The main project build file for phing operations. This file can
               be overridden with project specific configuration.
-->

<project name="project-template" default="build" phingVersion="2.8.2">

  <!-- Custom task classes -->
  <includepath classpath="${project.basedir}/phingcludes"/>
  <taskdef name="behat" classname="phingcludes.BehatTask"/>
  <taskdef name="drush" classname="phingcludes.DrushTask"/>

  <!--               -->
  <!--  Properties   -->
  <!-- ============= -->

  <!-- Application -->
  <property name="repo.root.relative" value="${project.basedir}/../.."/>
  <resolvepath propertyName="repo.root" file="${repo.root.relative}"/>

  <!-- @todo Make this value dynamic based on travis.config.yml -->
  <property name="docroot"
            value="${repo.root}/tmp/ps_project/docroot"
            override="true"/>
  <property name="drupal.profile"
            value="standard"
            override="true"/>
  <property name="site.name"
            value="Project Template"/>
  <property name="site.mail"
            value="root@[127.0.0.1]"/>
  <property name="drupal.makefile"
            value="${repo.root}/scripts/project.make.yml"
            override="true"/>
  <property name="drupal.base_url"
            value="http://localhost/"/>

  <property name="modules.custom.path"
            value="${repo.root}/docroot/sites/all/custom/modules"
            override="true"/>
  <property name="themes.custom.path"
            value="${repo.root}/docroot/sites/all/custom/themes"
            override="true"/>

  <!-- Credentials -->
  <property name="db.username" value="root"/>
  <property name="db.password" value=""/>
  <property name="db.name" value="travis_ci_pt"/>
  <property name="db.host" value="localhost"/>
  <property name="account.name" value="admin"/>
  <property name="account.password" value="password"/>
  <property name="account.mail" value="root@[127.0.0.1]"/>

  <!-- Drush, Composer & Behat -->
  <property name="composer.bin" value="${repo.root}/bin"/>
  <property name="drush.bin" value="${composer.bin}/drush" override="true"/>
  <property name="drush.root" value="${docroot}"/>
  <property name="drush.source" value="@${phing.project.name}.dev"
            override="true"/>
  <property name="drush.file"
            value="${phing.project.name}.aliases.drushrc.php"
            override="true"/>
  <property name="behat.config"
            value="${repo.root}/tests/behat/behat.yml"/>
  <property name="behat.local"
            value="${repo.root}/tests/behat/local.yml"/>
  <property name="phantomjs.bin"
            value="${composer.bin}/phantomjs" />
  <property name="phantomjs.webdriver" value="4444" />

  <!-- We override this so Drupal install works -->
  <property name="drush.cmd" value="${drush.bin} -r ${docroot}"
            override="true"/>

  <!-- Set git properties -->
  <property name="git.branch.default" value="master" />

  <!-- Conditional properties -->
  <!-- Check for a travis branch variable -->
  <exec command="echo $TRAVIS_BRANCH"
        outputProperty="git.branch.current"
        dir="${repo.root}"
        logoutput="true"
        checkreturn="true" />

  <!-- If the variable was not set grab it from git -->
  <!-- This does not work for travis as it uses a detached head -->
  <if>
    <isfalse value="${git.branch.current}" />
    <then>
      <exec command="git rev-parse --abbrev-ref HEAD"
            outputProperty="git.branch.current"
            dir="${repo.root}"
            logoutput="true"
            checkreturn="true" />
    </then>
  </if>

  <!-- The following allows local overrides. -->
  <property file="${project.basedir}/build.properties" override="true"/>

  <!--               -->
  <!-- Filesets      -->
  <!-- ============= -->
  <fileset dir="${docroot}" id="custom.files" expandsymboliclinks="true">
    <include name="sites/all/modules/custom/**"/>
    <include name="sites/all/modules/features/**"/>
  </fileset>


  <fileset  dir="${docroot}" id="custom.themes">
    <include name="sites/all/themes/custom/**"/>
  </fileset>

  <!--               -->
  <!-- Targets       -->
  <!-- ============= -->

  <target name="build"
          description="Build the project and install Drupal."
          depends="git-reset, run-pt-installer, install-drupal"/>

  <target name="build:local"
          description="Build the project without removing uncommitted changes."
          depends="make, install-drupal">
    <property name="build.local" value="1" />
  </target>

  <target name="build:with-validation"
          description="Build the project, install, then run code validation."
          depends="git-reset, make, install-drupal, validate:all"/>

  <target name="build:with-tests"
          description="Build the project, install, then run tests."
          depends="git-reset, make, install-drupal, test:all"/>

  <target name="build:full"
          description="Build the project, install Drupal, run validation and tests."
          depends="git-reset, make, install-drupal, run-tests"/>

  <target name="build:full:no-clean"
          description="Build the project without removing local changes, install Drupal, run validation and tests."
          depends="make, install-drupal, run-tests"/>

  <target name="run-tests" description="Runs code validation and tests on an installed Drupal codebase."
          depends="validate:all, test:all"/>

  <target name="validate:all" description="Runs code validation on Drupal."
          depends="validate:lint, validate:phpcs, validate:phpmd"/>

  <target name="test:all" description="Runs all tests against Drupal."
          depends="test:security-updates, test:behat"/>

  <target name="git-reset"
          description="Cleanup build artifacts">
    <exec command="git reset --hard"
          logoutput="true"
          passthru="true" />
  </target>

  <target name="rm-docroot"
          description="Remove the docroot folder">
    <exec command="git clean -fd"
          logoutput="true"
          passthru="true"/>
    <if>
      <available property="docroot.exists" file="${docroot}" type="dir"/>
      <then>
        <if>
          <available property="docroot.sites.exists" file="${docroot}/sites/default" type="dir"/>
          <then>
            <chmod file="${docroot}/sites/default" mode="2775"/>
          </then>
        </if>
        <delete dir="${docroot}"/>
      </then>
    </if>
  </target>

  <target name="phantomjs:launch"
          description="Launches a GhostDriver.">
    <exec command="${phantomjs.bin} --webdriver=${phantomjs.webdriver}"
          passthru="true"
          spawn="true"
          checkreturn="true" />
  </target>

  <!-- Drush make the build using a recursive strategy -->
  <target name="make"
          description="Run drush make"
          depends="rm-docroot">

    <drush command="make" assume="yes" verbose="TRUE">
      <option name="concurrency">8</option>
      <param>"${drupal.makefile}"</param>
      <param>"${docroot}"</param>
    </drush>

  </target>

  <target name="validate:lint" description="Runs a php lint against the codebase.">
    <phplint>
      <fileset dir="${docroot}">
        <include name="**/*.inc"/>
        <include name="**/*.php"/>
        <include name="**/*.module"/>
        <include name="**/*.install"/>
        <include name="**/*.profile"/>
        <include name="**/*.test"/>
        <include name="**/*.theme"/>
      </fileset>
    </phplint>
  </target>

  <target name="validate:phpcs"
          description="Sniffs custom code to ensure it meets standards.">

    <phpcodesniffer
        standard="${repo.root}/vendor/drupal/coder/coder_sniffer/Drupal/"
        showSniffs="true"
        showWarnings="true"
        haltonerror="true"
        haltonwarning="true">
      <fileset refid="custom.files"/>
      <formatter type="full" usefile="false"/>
    </phpcodesniffer>
  </target>

  <!-- Run code complexity and cleanliness checks on custom code. -->
  <target name="validate:phpmd" description="Checks custom code for complexity.">
    <phpmd rulesets="codesize,unusedcode,cleancode">
      <fileset refid="custom.files"/>
      <formatter type="text" outfile="false" usefile="false"/>
    </phpmd>
  </target>

  <!-- Install Drupal. -->
  <target name="install-drupal"
          description="Installs Drupal">

    <drush command="site-install" assume="yes" verbose="TRUE">
      <option name="db-url">"mysql://${db.username}:${db.password}@${db.host}/${db.name}"</option>
      <option name="site-name">"${site.name}"</option>
      <option name="debug" />
      <option name="site-mail">"${site.mail}"</option>
      <option name="account-name">"${account.name}"</option>
      <option name="account-mail">"${account.mail}"</option>
      <param>"${drupal.profile}"</param>
    </drush>

  </target>

  <!-- Ensure Drupal doesn't have any modules requiring security updates. -->
  <!-- Intentionally removed checkreturn="true" so that this does not cause failure. -->
  <target name="test:security-updates"
          description="Checks an installed site for security updates on modules">
    <exec dir="${docroot}"
          command="! ${drush.bin} -n ups --check-disabled --security-only 2>/dev/null | grep 'SECURITY UPDATE'"
          logoutput="true"
          passthru="true"/>
  </target>

  <target name="test:behat" description="Behat testing" depends="phantomjs:launch">
    <!-- If behat.local.yml doesn't exist, behat will be a sad panda so create a stub to appease it. -->
    <if>
      <not>
        <available file="${behat.local}" property="behat_local_exists" value="exists"/>
      </not>
      <then>
        <echo message="# Local behat settings." file="${behat.local}"
              append="false"/>
      </then>
    </if>

    <!-- Run behat. Any settings in behat.yml or behat.local.yml will be used. -->
    <behat executable="${composer.bin}/behat"
           config="${behat.config}"
           verbose="true"
           strict="true"
           haltonerror="true"
           returnProperty="behatPass"/>
  </target>

  <!-- Execute PHPUnit tests. -->
  <target name="test:phpunit"
          description="Checks an installed site for security updates on modules">
    <exec dir="${docroot}/tests/phpunit"
          command="phpunit ./*"
          logoutput="true"
          checkreturn="true"/>
  </target>

  <!-- Configure the project template installer. -->
  <target name="configure-pt-installer"
          description="Generates config.yml file for installer to use.">
    <exec command="cp build/travis/travis.config.yml config.yml"
          dir="${repo.root}"
          logoutput="true"
          checkreturn="true" />
  </target>

  <!-- Run the project template installer. -->
  <target name="run-pt-installer"
          description="Runs the project template installer"
          depends="configure-pt-installer">
    <exec command="php ${composer.bin}/project-template-installer install --temporary"
          dir="${repo.root}"
          logoutput="true"
          checkreturn="true" />
  </target>
</project>
